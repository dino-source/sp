#11.1 Ещё раз про переменные (variable) и ссылки (references):

#1 Вопрос: Что такое переменная (variable)? 
Ответ: Переменная (variable) - это именованная область памяти (named storage region).

#2 Вопрос: Какие атрибуты есть у переменной?
Ответ: тип (type), имя (name), хранимое значение (stored value), адрес (address).

#3 Вопрос: как получить значение (value), которое хранит переменная?
Ответ: обратиться к переменной по имени.
Пример:
int students;  // объявили переменную типа int по имени "students"
students = 4; // инициализировали переменную значением 4
std::cout << students; // получили доступ к области памяти, хранящую значение 4 через имя переменной

#4 Вопрос: как получить адрес переменной?
Ответ: использовать оператор взятия адреса (address-of operator).
Пример:
std::cout << &students; // выводим на консоль адрес переменной student

#5 Вопрос: что представляет из себя адрес переменной?
Ответ: адрес переменной - это просто целое число представленное в шестнадцатиричном формате
Пример:
0x7fffffffd83c

#6 Вопрос: почему и для объявления ссылки и для получения адреса используется один и тот же символ (амперсанд)?
Ответ: это пример так называемой перегрузки операторов (operator overloading) - один и тот же символ в разном контексте означает разные вещи.

#7 Вопрос: что такое ссылка?
Ответ: ссылка - это алиас (альтернативное имя) переменной.
Пример:
int children = 3;
int &kids = children; // теперь kids - альтернативное имя для children

#8 Вопрос: можно ли объявить ссылку, которая не ссылается ни на что?
Ответ: нет, ссылка должна быть инициализирована сразу при объявлении.

#9 Вопрос: можно ли переназначить ссылку (заставить её ссылаться на другой объект)?
Ответ: нет.

#10 Вопрос: можно ли создать массив ссылок?
Ответ: нет.
Пример:
std::vector<int&> collection_of_pointers_to_int; // не скомпилируется

#11 Вопрос: можно ли ссылки использовать в качестве параметров функции?
Ответ: можно.
Пример:
#include <iostream>

void cube(int &number); // прототип функции cube, в качестве параметра - ссылка на int

int main()
{
    int num = 4;
    cube(num); // вызов функции cube - в качестве аргумента передаём переменную num
    std::cout << num << '\n'; // 64
}

void cube(int &number) // определение функции cube, в качестве параметра - ссылка на int
{
    number = number * number * number;
}